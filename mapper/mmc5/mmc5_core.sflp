
// MMC5

%i "../../apu/square_ch.h"

/*
実装について
 APUと同じもの（Sweepは削除？）が実装されているとのことなので
 APUの矩形波ジェネレータをそのままインクルード
*/

//%i "../../apu/length_rom.h"
declare length_rom
{
	input adrs<8>;
	instrin read;
	output dout<8>;
	instr_arg read(adrs);
}

circuit mmc5_core
{
	input adrs<5>, din<8>;
//	output dout<8>;
	instrin io_write(adrs, din);
//	io_read(adrs);

	instrin run, ready;
//input dbg_in;
	output volume_L<8>, volume_R<8>;
	instrout note_on;

	reg_ws reset;
//	reg_wr dout_reg<8>;

	// Length Counter Table
	length_rom len_max;

	// Frame Sequencer
	reg_wr f_frame_sequencer_mode; // default 0 ?
	reg_wr frame_ls<5>;

	square_ch sq1, sq2;

	reg_wr noused;

	stage_name FrameSequencer { task do(); }

	if(reset){
		reset := 0b0;
		frame_ls := 0b00001;
	}

	if(noused){
		sq1.Sweep();
		sq2.Sweep();
	}

	sq1.ch_slct = 0b0;
	sq2.ch_slct = 0b1;
/*
	any{
		io_read : dout_reg := dout;
		else : dout = dout_reg;
	}
*/
	// lengthデータはsq1,sq2で全て
	// adrs<1:0>==0b11 din<7:3> となっている
	if(io_write & (adrs<4:3>==0b00) & (adrs<1:0>==0b11)){
		len_max.read(0b000||din<7:3>);
	}
	sq1.length_max = len_max.dout;
	sq2.length_max = len_max.dout;

/*
	volume_L =
		  (0b000 || sq1.volume || 0b0)
		;
	volume_R =
		+ (0b000 || sq2.volume || 0b0)
		;
*/

	// Monoral
	volume_L =
		  (0b000 || sq1.volume || 0b0)
		+ (0b000 || sq2.volume || 0b0)
		;
	volume_R = volume_L;

//f_frame_sequencer_mode := dbg_in;

/*
	instruct io_read par{
	}
*/
	instruct io_write par{
		any{
			adrs<4:2>==0b000 : sq1.write(adrs<1:0>, din);
			adrs<4:2>==0b001 : sq2.write(adrs<1:0>, din);
			adrs==0b10101 : par{	// Sound Ctrl
				sq1.ctrl(din<0>);
				sq2.ctrl(din<1>);
			}
/*
			adrs==0b10111 : par{
				f_frame_sequencer_mode := din<7>;
				frame_ls := 0b00001;
			}
*/
		}
	}

	instruct ready par{
		sq1.ctrl(0b0);
		sq2.ctrl(0b0);
	}

	// 外部からのmpuクロックで動作
	instruct run par{
		generate FrameSequencer.do();
		sq1.run();
		sq2.run();
	}

	instruct sq1.note_on note_on();
	instruct sq2.note_on note_on();

	stage FrameSequencer {
		reg_wr frame_div<13>;
		par{
			finish;
			if(frame_div!=0){
				frame_div--;
			}
			else{
				frame_div := 7456;	// 7457-1
				if(f_frame_sequencer_mode){
					// 5-step
					if(^frame_ls<4>){	// 192Hz
						sq1.EnvelopeGenerate();
						sq2.EnvelopeGenerate();
					}
					if(frame_ls<0> | frame_ls<2>){	// 96Hz
						sq1.LengthCount();
						sq2.LengthCount();
					}
					frame_ls := frame_ls<3:0> || frame_ls<4>;
				}
				else{
					// 4-step
					// 240Hz
					sq1.EnvelopeGenerate();
					sq2.EnvelopeGenerate();
					if(frame_ls<1> | frame_ls<3>){	// 120Hz
						sq1.LengthCount();
						sq2.LengthCount();
					}
					frame_ls := 0b0 || frame_ls<2:0> || frame_ls<3>;
				}
			}
		}
	}

}
