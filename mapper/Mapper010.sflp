
/*
	Mapper 010
	MMC4
		PRG-ROM 16KB banks 8 or 16 max 256KB
		CHR-ROM 8KB banks 8 or 16 max 128KB
*/

circuit Mapper010
{
	// PRG-ROM
	input ROM_SELn;
	instrin prg_read, prg_write;
	input prg_A<15>, prg_Din<8>;
	output prg_Dout<8>;
	output IRQn;

	// CHR-ROM
	instrin chr_read;//, chr_write; // RDn, WEn
	input chr_A<14>;//, chr_Din<8>; // chr_A13n
	output chr_Dout<8>;
	output VRAM_CSn, VRAM_A10;

//	instrin Phi; // 1.789MHz
	output usound<11>, ssound<14>;

	instrout exram_read(exram_adrs);
	output exram_adrs<13>; // EX_RAM  8KB
	output exram_wdata<8>;
	instrout exram_write(exram_adrs, exram_wdata);
	input exram_rdata<8>;

	// 外部RAMへのアクセス
	instrout prg_ram_read(prg_ram_adrs);
	output prg_ram_adrs<18>; // PRG_ROM max 256KB
//	output prg_ram_wdata<8>;
//	instrout prg_ram_write(prg_ram_adrs, prg_ram_wdata);
	input prg_rom_rdata<8>;

	instrout chr_ram_read(chr_ram_adrs);
	output chr_ram_adrs<17>; // CHR_ROM max 128KB
//	output chr_ram_wdata<8>;
//	instrout chr_ram_write(chr_ram_adrs, chr_ram_wdata);
	input chr_ram_rdata<8>;

	instrin init;

	input n16kRomBanks<6>, fMirroringType;
	reg_wr fMirroringType_reg;

	reg_wr prg_bank<4>, prg_last_bank<4>;
	reg_wr chr_bank0<5>, chr_bank1<5>;
	reg_wr regs0<5>, regs1<5>, regs2<5>, regs3<5>;
	reg_wr latch_a<4>, latch_b<4>;

	instrself map_rom, map_exram;

	par{

		if(ROM_SELn==0b0){
			map_rom();
		}
		else any{
		//	prg_A<14:13>==0b10 : map_exrom();
			prg_A<14:13>==0b11 : map_exram();
		}

		any{
			map_rom : prg_Dout = prg_rom_rdata;
			map_exram : prg_Dout = exram_rdata;
		}

		VRAM_CSn = ^chr_A<13>;

		if(fMirroringType_reg){
			// 垂直ミラー, 水平スクロールタイプ
			VRAM_A10 = chr_A<10>;
		}
		else{
			// 水平ミラー, 垂直スクロールタイプ
			VRAM_A10 = chr_A<11>;
		}

		chr_Dout = chr_ram_rdata;

		IRQn = 0b1;

		usound = // <11>
		   0b00000000000;

		ssound = // <14s>
		   0b00000000000000;
	}

	instruct init par{
		prg_bank := 0b0000;
		prg_last_bank := n16kRomBanks<4> || 0b111;
		chr_bank0 := 0b00001;
		chr_bank1 := 0b00000;
		regs0 := 0b00000;
		regs1 := 0b00100;
		regs2 := 0b00000;
		regs3 := 0b00000;
		latch_a := 0xE;
		latch_b := 0xE;
		fMirroringType_reg := fMirroringType;
	}

	instruct prg_read any{
		map_rom : par{
			// prg_bank<4> + prg_A<14> = <18>
			switch(prg_A<14>){
			case 0b0: prg_ram_read(prg_bank || prg_A<13:0>);
			case 0b1: prg_ram_read(prg_last_bank || prg_A<13:0>);
			}
		}
		map_exram : exram_read(prg_A<12:0>);
	}

	instruct prg_write any{
		map_rom : par{
			switch(prg_A<14:12>){
				case 0b010: par{ // $A000
					prg_bank := prg_Din<3:0> & prg_last_bank; // mask
				}
				case 0b011: par{ // $B000
					regs0 := prg_Din<4:0>;
					if(latch_a==0xD) chr_bank0 := prg_Din<4:0>;
				}
				case 0b100: par{ // $C000
					regs1 := prg_Din<4:0>;
					if(latch_a==0xE) chr_bank0 := prg_Din<4:0>;
				}
				case 0b101: par{ // $D000
					regs2 := prg_Din<4:0>;
					if(latch_b==0xD) chr_bank1 := prg_Din<4:0>;
				}
				case 0b110: par{ // $E000
					regs3 := prg_Din<4:0>;
					if(latch_b==0xE) chr_bank1 := prg_Din<4:0>;
				}
				case 0b111: par{ // $F000
					fMirroringType_reg := ^prg_Din<0>;
				}
			}
		}
		map_exram : exram_write(prg_A<12:0>, prg_Din);
	}

	instruct chr_read par{
		if(chr_A<13>==0b0){
			// chr_bank<5> + chr_A<12> = <17>
			switch(chr_A<12>){
			case 0b0: par{
				chr_ram_read(chr_bank0 || chr_A<11:0>);

				if((chr_A<11:4>==0xFD) | (chr_A<11:4>==0xFE)){
					any{
						latch_a==0xD : chr_bank0 := regs0;
						latch_a==0xE : chr_bank0 := regs1;
					}
					latch_a := chr_A<7:4>;
				}
			}
			case 0b1: par{
				chr_ram_read(chr_bank1 || chr_A<11:0>);

				if((chr_A<11:4>==0xFD) | (chr_A<11:4>==0xFE)){
					any{
						latch_b==0xD : chr_bank1 := regs2;
						latch_b==0xE : chr_bank1 := regs3;
					}
					latch_b := chr_A<7:4>;
				}
			}
			}
		}
	}
/*
	instruct chr_write par{
		if(chr_A<13>==0b0){
			chr_ram_write(0b00000 || chr_A<12:0>, chr_Din);
		}
	}
*/

}
