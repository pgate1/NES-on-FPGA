
circuit nsf_init_rom
{
	instrin read(adrs), write(adrs, din);
	input adrs<8>, din<8>;
	output dout<8>;

	reg dout_reg<8>;

	mem cells[256]<8> = {
	0x78,             // SEI
	0xD8,             // CLD
	0xA9, 0x00,       // LDA #$00
	0x8D, 0x00, 0x20, // STA $2000 NMI disable
	// frame IRQ disable
	0xA9, 0x80,       // LDA $80
	0x8D, 0x1A, 0x40, // STA $401A frame IRQ disable
	0xA2, 0xFF,       // LDX #$FF
	0x9A,             // TXS

	// Ç±Ç±ÇÁÇ†ÇΩÇËÇ≈0x4015Ç…0x0FÇwriteÇµÇΩï˚Ç™ó«Ç≥ÇªÇ§
	0xA9, 0x0F,       // LDA $0x0F
	0x8D, 0x15, 0x40, // STA $4015

	0xA9, 0x00,       // LDA #$00 0x15  ã»ëIë
	0xA2, 0x00,       // LDX #$00 0x17  0:NTSC 1:PAL
	0x20, 0x00, 0x00, // JSR #nsf.InitAdrs 0x19,0x1A

	0xA9, 0x80,       // LDA #$80
	0x8D, 0x00, 0x20, // STA $2000 NMI enable ïÅí ÇÃnsfÇÕïKóv

	// 0x4120
	0x4C, 0x20, 0x41, // JMP 0x4120 loop
	0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

	// 0x4130
	0xA9, 0x00,       // LDA #$00
	0x8D, 0x00, 0x20, // STA $2000 NMI disable
	0x20, 0x00, 0x00, // JSR #nsf.PlayAdrs 0x36,0x37
	0xA9, 0x80,       // LDA #$80
	0x8D, 0x00, 0x20, // STA $2000 NMI enable
	0x40              // RTI
	};

	instruct read dout_reg := cells[adrs];
	dout = dout_reg;

	instruct write cells[adrs] := din;
}
