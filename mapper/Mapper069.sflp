
/*
	Mapper 069
	Sunsoft FME-7
		PRG-ROM 16KB banks 8 16 max 256KB
		CHR-ROM 8KB banks 16 32 max 256KB
*/

%i "sn5b/sn5b_core.h"

circuit Mapper069
{
	// PRG-ROM
	input ROM_SELn;
	instrin prg_read, prg_write;
	input prg_A<15>, prg_Din<8>;
	output prg_Dout<8>;
	output IRQn;

	// CHR-ROM
	instrin chr_read;//, chr_write; // RDn, WEn
	input chr_A<14>;//, chr_Din<8>; // chr_A13n
	output chr_Dout<8>;
	output VRAM_CSn, VRAM_A10;

	instrin Phi; // 1.789MHz
	output usound<11>, ssound<14>;

	// 外部RAMへのアクセス
	instrout prg_rom_read(prg_rom_adrs);
	output prg_rom_adrs<18>; // PRG_ROM max 256KB
	input prg_rom_rdata<8>;

	instrout chr_ram_read(chr_ram_adrs);
	output chr_ram_adrs<18>; // CHR_ROM max 256KB
//	output chr_ram_wdata<8>;
//	instrout chr_ram_write(chr_ram_adrs, chr_ram_wdata);
	input chr_ram_rdata<8>;

	instrin ready, init;

	instrin hblank;
input dbg<8>;

	input n16kRomBanks<6>, fMirroringType;
	reg_wr fMirroringType_reg;

	reg_wr prg_bank3<5>, prg_bank4<5>, prg_bank5<5>, prg_bank6<5>, prg_last_bank<5>;
	reg_wr chr_bank0<8>, chr_bank1<8>, chr_bank2<8>, chr_bank3<8>;
	reg_wr chr_bank4<8>, chr_bank5<8>, chr_bank6<8>, chr_bank7<8>;

	instrself map_rom, map_exram;

	reg_ws IRQn_reg;
	reg_wr command<4>;

	sn5b_core sn5b;

	reg_wr irq_counter_L<8>, irq_counter_H<8>, irq_enabled;

	par{

		if(ROM_SELn==0b0){
			map_rom();
		}
		else any{
		//	prg_A<14:13>==0b10 : map_exrom();
			prg_A<14:13>==0b11 : map_exram();
		}

		prg_Dout = prg_rom_rdata;

		VRAM_CSn = ^chr_A<13>;

		if(fMirroringType_reg){
			// 垂直ミラー, 水平スクロールタイプ
			VRAM_A10 = chr_A<10>;
		}
		else{
			// 水平ミラー, 垂直スクロールタイプ
			VRAM_A10 = chr_A<11>;
		}

		chr_Dout = chr_ram_rdata;

		IRQn = IRQn_reg;

		usound = // <11>
			0b00 || sn5b.sound;

		ssound = // <14s>
		   0b00000000000000;
	}

	instruct ready par{
		sn5b.ready();
	}

	instruct init par{
		command := 0;
		prg_bank3 := 0b00000;
		prg_bank4 := 0b00000;
		prg_bank5 := 0b00001;
		prg_bank6 := n16kRomBanks<4> || 0b1110;
		prg_last_bank := n16kRomBanks<4> || 0b1111;
		irq_counter_L := 0;
		irq_counter_H := 0;
		irq_enabled := 0;
		chr_bank0 := 0x00;
		chr_bank1 := 0x01;
		chr_bank2 := 0x02;
		chr_bank3 := 0x03;
		chr_bank4 := 0x04;
		chr_bank5 := 0x05;
		chr_bank6 := 0x06;
		chr_bank7 := 0x07;
		fMirroringType_reg := fMirroringType;
	}

	instruct prg_read any{
		map_rom : par{
			// prg_bank<5> + prg_A<13> = <18>
			sel prg_read_bank<5>;
			switch(prg_A<14:13>){
				case 0b00: prg_read_bank = prg_bank4;
				case 0b01: prg_read_bank = prg_bank5;
				case 0b10: prg_read_bank = prg_bank6;
				case 0b11: prg_read_bank = prg_last_bank;
			}
			prg_rom_read((prg_read_bank<4> & n16kRomBanks<4>)
						|| prg_read_bank<3:0> || prg_A<12:0>);
		}
		map_exram : prg_rom_read(prg_bank3 || prg_A<12:0>);
	}

	instruct prg_write any{
		map_rom : par{
			switch(prg_A<14:13>||prg_A<0>){
				case 0b000: par{ // $8000 Command
					command := prg_Din<3:0>;
				}
				case 0b010: par{ // $A000 Page Number for Command
					switch(command){
						case 0x0: chr_bank0 := prg_Din;
						case 0x1: chr_bank1 := prg_Din;
						case 0x2: chr_bank2 := prg_Din;
						case 0x3: chr_bank3 := prg_Din;
						case 0x4: chr_bank4 := prg_Din;
						case 0x5: chr_bank5 := prg_Din;
						case 0x6: chr_bank6 := prg_Din;
						case 0x7: chr_bank7 := prg_Din;
						case 0x8: prg_bank3 := prg_Din<4:0>;
						case 0x9: prg_bank4 := prg_Din<4:0>;
						case 0xA: prg_bank5 := prg_Din<4:0>;
						case 0xB: prg_bank6 := prg_Din<4:0>;
						case 0xC: fMirroringType_reg := ^prg_Din<0>;
						case 0xD: par{
							irq_enabled := prg_Din<0>;
							IRQn_reg := 0b1;
						}
						case 0xE: par{
							irq_counter_L := prg_Din;
							IRQn_reg := 0b1;
						}
						case 0xF: par{
							irq_counter_H := prg_Din;
							IRQn_reg := 0b1;
						}
					}
				}
				case 0b100: par{ // $C000
					sn5b.io_write(0b0, prg_Din);
				}
				case 0b110: par{ // $E000
					sn5b.io_write(0b1, prg_Din);
				}
			}
		}
	}

	instruct chr_read par{
		if(chr_A<13>==0b0){
			// chr_bank<8> + chr_A<10> = <18>
			sel chr_read_bank<8>;
			switch(chr_A<12:10>){
				case 0b000: chr_read_bank = chr_bank0;
				case 0b001: chr_read_bank = chr_bank1;
				case 0b010: chr_read_bank = chr_bank2;
				case 0b011: chr_read_bank = chr_bank3;
				case 0b100: chr_read_bank = chr_bank4;
				case 0b101: chr_read_bank = chr_bank5;
				case 0b110: chr_read_bank = chr_bank6;
				case 0b111: chr_read_bank = chr_bank7;
			}
			chr_ram_read(chr_read_bank || chr_A<9:0>);
		}
	}

/*
	instruct chr_write par{
		if(chr_A<13>==0b0){
			chr_ram_write(0b00000 || chr_A<12:0>, chr_Din);
		}
	}
*/

	instruct Phi par{
		sn5b.run();
/*
		reg_wr hcount<8>;
		instrself hblank;

		if(hcount==0x71){ // MPUで114clkくらい？
			hblank();
			hcount := 0x00;
		}
		else hcount++;
*/
	}

	instruct hblank par{
		if(irq_enabled){
			if(irq_counter_H<7>){
				irq_counter_L := 0xFF;
				irq_counter_H := 0x7F;
				irq_enabled := 0b0;
				IRQn_reg := 0b0;
			}
			else{
				// 0x0072 for Gimmix
				sel irq_counter_s<16>;
				irq_counter_s = (irq_counter_H||irq_counter_L) - 0x0072;
				irq_counter_L := irq_counter_s<7:0>;
				irq_counter_H := irq_counter_s<15:8>;
			}
		}
	}

}
