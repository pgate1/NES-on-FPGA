
/*
	Mapper 025
	Konami VRC4
		PRG-ROM 16KB banks 8 16 max 256KB
		CHR-ROM 8KB banks 16 32 max 256KB
*/

circuit Mapper025
{
	// PRG-ROM
	input ROM_SELn;
	instrin prg_read, prg_write;
	input prg_A<15>, prg_Din<8>;
	output prg_Dout<8>;
	output IRQn;

	// CHR-ROM
	instrin chr_read;//, chr_write; // RDn, WEn
	input chr_A<14>;//, chr_Din<8>; // chr_A13n
	output chr_Dout<8>;
	output VRAM_CSn, VRAM_A10;

//	instrin Phi; // 1.789MHz
	output usound<11>, ssound<14>;

	instrout exram_read(exram_adrs);
	output exram_adrs<13>; // EX_RAM  8KB
	output exram_wdata<8>;
	instrout exram_write(exram_adrs, exram_wdata);
	input exram_rdata<8>;

	// 外部RAMへのアクセス
	instrout prg_rom_read(prg_rom_adrs);
	output prg_rom_adrs<18>; // PRG_ROM max 256KB
	input prg_rom_rdata<8>;

	instrout chr_ram_read(chr_ram_adrs);
	output chr_ram_adrs<18>; // CHR_ROM max 256KB
//	output chr_ram_wdata<8>;
//	instrout chr_ram_write(chr_ram_adrs, chr_ram_wdata);
	input chr_ram_rdata<8>;

	instrin init;
	instrin hblank;

	input n16kRomBanks<6>, fMirroringType;
	reg_wr fMirroringType_reg;

	sel prg_adrs<8>;
	reg_wr prg_bank4<5>, prg_bank5<5>, prg_bank6<5>, prg_last_bank<5>;
	reg_wr chr_bank0_L<4>, chr_bank1_L<4>, chr_bank2_L<4>, chr_bank3_L<4>;
	reg_wr chr_bank4_L<4>, chr_bank5_L<4>, chr_bank6_L<4>, chr_bank7_L<4>;
	reg_wr chr_bank0_H<4>, chr_bank1_H<4>, chr_bank2_H<4>, chr_bank3_H<4>;
	reg_wr chr_bank4_H<4>, chr_bank5_H<4>, chr_bank6_H<4>, chr_bank7_H<4>;

	instrself map_rom, map_exram;

	reg_ws IRQn_reg;
	reg_wr regs_10;

	reg_wr irq_counter<8>, irq_enabled<2>; //irq_clock<8>;
	reg_wr irq_latch_H<4>, irq_latch_L<4>;

	par{

		if(ROM_SELn==0b0){
			map_rom();
		}
		else any{
		//	prg_A<14:13>==0b10 : map_exrom();
			prg_A<14:13>==0b11 : map_exram();
		}

		any{
			map_rom : prg_Dout = prg_rom_rdata;
			map_exram : prg_Dout = exram_rdata;
		}

		prg_adrs = 0b1 || prg_A<14:12> || prg_A<3:0>; // 1111_----_----_1111

		VRAM_CSn = ^chr_A<13>;

		if(fMirroringType_reg){
			// 垂直ミラー, 水平スクロールタイプ
			VRAM_A10 = chr_A<10>;
		}
		else{
			// 水平ミラー, 垂直スクロールタイプ
			VRAM_A10 = chr_A<11>;
		}

		chr_Dout = chr_ram_rdata;

		IRQn = IRQn_reg;

		usound = // <11>
			0b00000000000;

		ssound = // <14s>
		   0b00000000000000;
	}

	instruct init par{
		regs_10 := 0;
		prg_bank4 := 0b00000;
		prg_bank5 := 0b00001;
		prg_bank6     := n16kRomBanks<4> || 0b1110;
		prg_last_bank := n16kRomBanks<4> || 0b1111;
		irq_latch_L := 0;
		irq_latch_H := 0;
		irq_counter := 0;
		irq_enabled := 0;
	//	irq_clock := 0;
		chr_bank0_L := 0x0; chr_bank0_H := 0x0;
		chr_bank1_L := 0x1; chr_bank1_H := 0x0;
		chr_bank2_L := 0x2; chr_bank2_H := 0x0;
		chr_bank3_L := 0x3; chr_bank3_H := 0x0;
		chr_bank4_L := 0x4; chr_bank4_H := 0x0;
		chr_bank5_L := 0x5; chr_bank5_H := 0x0;
		chr_bank6_L := 0x6; chr_bank6_H := 0x0;
		chr_bank7_L := 0x7; chr_bank7_H := 0x0;
		fMirroringType_reg := fMirroringType;
	}

	instruct prg_read any{
		map_rom : par{
			// prg_bank<5> + prg_A<13> = <18>
			sel prg_read_bank<5>;
			switch(prg_A<14:13>){
				case 0b00: prg_read_bank = prg_bank4;
				case 0b01: prg_read_bank = prg_bank5;
				case 0b10: prg_read_bank = prg_bank6;
				case 0b11: prg_read_bank = prg_last_bank;
			}
			prg_rom_read((prg_read_bank<4> & n16kRomBanks<4>)
						|| prg_read_bank<3:0> || prg_A<12:0>);
		}
		map_exram : exram_read(prg_A<12:0>);
	}

	instruct prg_write any{
		map_rom : any{
			prg_adrs==0x80 : par{
				if(regs_10){
					prg_bank6 := prg_Din<4:0>;
				}
				else{
					prg_bank4 := prg_Din<4:0>;
				}
			}
			prg_adrs==0x90 : par{
				fMirroringType_reg := ^prg_Din<0>;
			}
			(prg_adrs==0x91) | (prg_adrs==0x94) : par{
				if(regs_10 @ prg_Din<1>){
					prg_bank4 := prg_bank6;
					prg_bank6 := prg_bank4;
				}
				regs_10 := prg_Din<1>;
			}
			prg_adrs==0xA0 : par{
				prg_bank5 := prg_Din<4:0>;
			}

			prg_adrs==0xB0 : par{
				chr_bank0_L := prg_Din<3:0>;
			}
			(prg_adrs==0xB2) | (prg_adrs==0xB8) : par{
				chr_bank0_H := prg_Din<3:0>;
			}

			(prg_adrs==0xB1) | (prg_adrs==0xB4) : par{
				chr_bank1_L := prg_Din<3:0>;
			}
			(prg_adrs==0xB3) | (prg_adrs==0xBC) : par{
				chr_bank1_H := prg_Din<3:0>;
			}

			prg_adrs==0xC0 : par{
				chr_bank2_L := prg_Din<3:0>;
			}
			(prg_adrs==0xC2) | (prg_adrs==0xC8) : par{
				chr_bank2_H := prg_Din<3:0>;
			}

			(prg_adrs==0xC1) | (prg_adrs==0xC4) : par{
				chr_bank3_L := prg_Din<3:0>;
			}
			(prg_adrs==0xC3) | (prg_adrs==0xCC) : par{
				chr_bank3_H := prg_Din<3:0>;
			}

			prg_adrs==0xD0 : par{
				chr_bank4_L := prg_Din<3:0>;
			}
			(prg_adrs==0xD2) | (prg_adrs==0xD8) : par{
				chr_bank4_H := prg_Din<3:0>;
			}

			(prg_adrs==0xD1) | (prg_adrs==0xD4) : par{
				chr_bank5_L := prg_Din<3:0>;
			}
			(prg_adrs==0xD3) | (prg_adrs==0xDC) : par{
				chr_bank5_H := prg_Din<3:0>;
			}

			prg_adrs==0xE0 : par{
				chr_bank6_L := prg_Din<3:0>;
			}
			(prg_adrs==0xE2) | (prg_adrs==0xE8) : par{
				chr_bank6_H := prg_Din<3:0>;
			}

			(prg_adrs==0xE1) | (prg_adrs==0xE4) : par{
				chr_bank7_L := prg_Din<3:0>;
			}
			(prg_adrs==0xE3) | (prg_adrs==0xEC) : par{
				chr_bank7_H := prg_Din<3:0>;
			}

			prg_adrs==0xF0 : par{
				irq_latch_L := prg_Din<3:0>;
			}
			(prg_adrs==0xF2) | (prg_adrs==0xF8) : par{
				irq_latch_H := prg_Din<3:0>;
			}
			(prg_adrs==0xF1) | (prg_adrs==0xF4) : par{
				irq_enabled := prg_Din<1:0>;
				irq_counter := irq_latch_H || irq_latch_L;
			//	irq_clock := 0;
			}
			(prg_adrs==0xF3) | (prg_adrs==0xFC) : par{
				irq_enabled := 2#irq_enabled<0>;
			}
			(prg_adrs<7:4>==0xF) : par{
				IRQn_reg := 0b1;
			}
		}
		map_exram : exram_write(prg_A<12:0>, prg_Din);
	}

	instruct chr_read par{
		if(chr_A<13>==0b0){
			// chr_bank<8> + chr_A<10> = <18>
			sel chr_read_bank<8>;
			switch(chr_A<12:10>){
				case 0b000: chr_read_bank = chr_bank0_H || chr_bank0_L;
				case 0b001: chr_read_bank = chr_bank1_H || chr_bank1_L;
				case 0b010: chr_read_bank = chr_bank2_H || chr_bank2_L;
				case 0b011: chr_read_bank = chr_bank3_H || chr_bank3_L;
				case 0b100: chr_read_bank = chr_bank4_H || chr_bank4_L;
				case 0b101: chr_read_bank = chr_bank5_H || chr_bank5_L;
				case 0b110: chr_read_bank = chr_bank6_H || chr_bank6_L;
				case 0b111: chr_read_bank = chr_bank7_H || chr_bank7_L;
			}
			chr_ram_read(chr_read_bank || chr_A<9:0>);
		}
	}

/*
	instruct chr_write par{
		if(chr_A<13>==0b0){
			chr_ram_write(0b00000 || chr_A<12:0>, chr_Din);
		}
	}
*/

/*
	instruct Phi par{
		reg_wr hcount<8>;
		instrself hblank;

		if(hcount==0x71){ // MPUで114clkくらい？
			hblank();
			hcount := 0x00;
		}
		else hcount++;
	}
*/

	instruct hblank par{
		if(irq_enabled<1>){
			if(/&irq_counter){
				irq_counter := irq_latch_H || irq_latch_L;
				IRQn_reg := 0b0;
			}
			else irq_counter++;
		}
	}

}
