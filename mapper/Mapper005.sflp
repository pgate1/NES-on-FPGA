
/*
	Mapper 005
	MMC5 とりあえずジャストブリード
		PRG-ROM 16KB banks 32 max 512KB
		CHR-ROM 8KB banks 32 max 256KB
*/

circuit Mapper005
{
	// PRG-ROM
	input ROM_SELn;
	instrin prg_read, prg_write;
	input prg_A<15>, prg_Din<8>;
	output prg_Dout<8>;
	reg_wr prg_Dout_reg<8>;
	output IRQn;

	// CHR-ROM
	instrin chr_read, chr_write;
	input chr_A<14>, chr_Din<8>;
	output chr_Dout<8>;
	output VRAM_CSn, VRAM_A10;

//	instrin Phi; // 1.789MHz
	output usound<11>, ssound<14>;

	instrout exram_read(exram_adrs);
	output exram_adrs<13>; // EX_RAM 8KB
	output exram_wdata<8>;
	instrout exram_write(exram_adrs, exram_wdata);
	input exram_rdata<8>;

	// 外部RAMへのアクセス
	instrout prg_rom_read(prg_rom_adrs);
	output prg_rom_adrs<19>; // PRG_ROM max 512KB
	input prg_rom_rdata<8>;

	instrout chr_ram_read(chr_ram_adrs);
	output chr_ram_adrs<18>; // CHR_ROM max 256KB
	output chr_ram_wdata<8>;
	instrout chr_ram_write(chr_ram_adrs, chr_ram_wdata);
	input chr_ram_rdata<8>;

	instrin init;

	input n16kRomBanks<6>, n8kVRomBanks<6>, fMirroringType;
	reg_wr fMirroringType_reg;

	reg_wr prg_bank4<6>, prg_bank5<6>, prg_bank6<6>, prg_bank7<6>;
	reg_wr chr_bank0<8>, chr_bank1<8>, chr_bank2<8>, chr_bank3<8>;
	reg_wr chr_bank4<8>, chr_bank5<8>, chr_bank6<8>, chr_bank7<8>;

	instrself map_rom, map_exrom, map_exram;

	reg_wr mmc5_prg_size<2>, mmc5_chr_size<2>;
	reg_wr fSaveRAMenable;
	reg_ws IRQn_reg;

	reg_wr pre_chr_A12;
	instrself hblank;
	reg_wr irq_enable, irq_status<8>, irq_scanline<8>, irq_line<8>, irq_clear;

	sel pA<16>;
	sel chr_read_bank<8>;

	par{

		if(ROM_SELn==0b0){
			map_rom();
		}
		else any{
			prg_A<14:13>==0b10 : map_exrom();
			prg_A<14:13>==0b11 : map_exram();
		}

		any{
			map_exrom : par{
				if(prg_read) prg_Dout_reg := prg_Dout;
				else prg_Dout = prg_Dout_reg;
			}
			map_rom : prg_Dout = prg_rom_rdata;
			map_exram : prg_Dout = exram_rdata;
		}

		pA = (^ROM_SELn) || prg_A;

		VRAM_CSn = ^chr_A<13>;

		if(fMirroringType_reg){
			// 垂直ミラー, 水平スクロールタイプ
			VRAM_A10 = chr_A<10>;
		}
		else{
			// 水平ミラー, 垂直スクロールタイプ
			VRAM_A10 = chr_A<11>;
		}

		// VRAMでもchr_bankは使用している
		// chr_bank<8> + chr_A<10> = <18>
	//	sel chr_read_bank<8>;
		switch(chr_A<12:10>){
			case 0b000: chr_read_bank = chr_bank0;
			case 0b001: chr_read_bank = chr_bank1;
			case 0b010: chr_read_bank = chr_bank2;
			case 0b011: chr_read_bank = chr_bank3;
			case 0b100: chr_read_bank = chr_bank4;
			case 0b101: chr_read_bank = chr_bank5;
			case 0b110: chr_read_bank = chr_bank6;
			case 0b111: chr_read_bank = chr_bank7;
		}

		chr_Dout = chr_ram_rdata;

		IRQn = IRQn_reg;

		usound = // <11>
		   0b00000000000;

		ssound = // <14s>
		   0b00000000000000;
	}

	instruct init par{
		prg_bank4 := (n16kRomBanks - 0b000001)<4:0> || 0b1;
		prg_bank5 := (n16kRomBanks - 0b000001)<4:0> || 0b1;
		prg_bank6 := (n16kRomBanks - 0b000001)<4:0> || 0b1;
		prg_bank7 := (n16kRomBanks - 0b000001)<4:0> || 0b1;

		irq_enable := 0;
		irq_status := 0x00;
		irq_scanline := 0;
		irq_line := 0;
		irq_clear := 0;

		chr_bank0 := 0x00;
		chr_bank1 := 0x01;
		chr_bank2 := 0x02;
		chr_bank3 := 0x03;
		chr_bank4 := 0x04;
		chr_bank5 := 0x05;
		chr_bank6 := 0x06;
		chr_bank7 := 0x07;

		fMirroringType_reg := fMirroringType;

		pre_chr_A12 := 0b0;
		IRQn_reg := 0b1;
	}

	instruct prg_read any{
		map_exrom : any{
			pA==0x5204 : par{
				prg_Dout = irq_status;
				irq_status := 0b0 || irq_status<6:0>;
				IRQn_reg := 0b1;
			}
			pA<15:10>==0b010111 : par{ // 0x5C00-0x5FFF 0b0101_11--
				
			}
		}
		map_rom : par{
			// prg_bank<6> + prg_A<13> = <19>
			sel prg_read_bank<6>;
			switch(prg_A<14:13>){
				case 0b00: prg_read_bank = prg_bank4;
				case 0b01: prg_read_bank = prg_bank5;
				case 0b10: prg_read_bank = prg_bank6;
				case 0b11: prg_read_bank = prg_bank7;
			}
			prg_rom_read(prg_read_bank || prg_A<12:0>);
		}
		map_exram : exram_read(prg_A<12:0>);
	}

	instruct prg_write any{
		map_exrom : any{
			pA==0x5100 : mmc5_prg_size := prg_Din<1:0>;
			pA==0x5101 : mmc5_chr_size := prg_Din<1:0>;
			pA<15:2>==0b0101_0001_0001_01 : par{ // 0x5114 0x5115 0x5116 0x5117
				if(prg_Din<7>) any{
					prg_A<1:0>==0b00 : par{ // 4
						if(mmc5_prg_size==3){
							prg_bank4 := prg_Din<5:0>;
						}
					}
					prg_A<1:0>==0b01 : par{ // 5
						if((mmc5_prg_size==1) | (mmc5_prg_size==2)){
						//	throw "PROM bank 5_1";
						//	SetPROM_16K_Bank(4, (data&0x7F)>>1);
						}
						if(mmc5_prg_size==3){
							prg_bank5 := prg_Din<5:0>;
						}
					}
					prg_A<1:0>==0b10 : par{ // 6
						if((mmc5_prg_size==2) | (mmc5_prg_size==3)){
							prg_bank6 := prg_Din<5:0>;
						}
					}
					prg_A<1:0>==0b11 : par{ // 7
						if(mmc5_prg_size==0){
						//	throw "PROM bank 7_0";
						//	SetPROM_32K_Bank( (data&0x7F)>>2 );
						}
						if(mmc5_prg_size==1){
						//	throw "PROM bank 7_1";
						//	SetPROM_16K_Bank(6, (data&0x7F)>>1 );
						}
						if((mmc5_prg_size==2) | (mmc5_prg_size==3)){
							prg_bank7 := prg_Din<5:0>;
						}
					}
				}
			}
			pA==0x5204 : par{
				irq_enable := prg_Din<7>;
				IRQn_reg := 0b1;
			}
		}
		map_rom : ;
		map_exram : exram_write(prg_A<12:0>, prg_Din);
	}

	instruct chr_read par{
		if(chr_A<13>==0b0){
			chr_ram_read(chr_read_bank || chr_A<9:0>);
		}

		if(chr_A<12> & (pre_chr_A12==0b0)) hblank();
		pre_chr_A12 := chr_A<12>;
	}

	instruct chr_write par{
		if(chr_A<13>==0b0){
		//	chr_ram_write(chr_read_bank || chr_A<9:0>, chr_Din);
		}
	}

	instruct hblank par{

		if(0b1/*line < 240*/){
			irq_scanline++;
			irq_status := irq_status | 0x40;
			irq_clear := 0;
		}
/*
		if(irq_enable){
			if(irq_counter==0x01){
				irq_counter := irq_latch;
				IRQn_reg := 0b0;
			}
			else irq_counter--;
		}
*/
	}

}
