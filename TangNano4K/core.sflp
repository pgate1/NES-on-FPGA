/*
	NES on FPGA feat. TangNano4K
	Copyright (c) 2023 pgate1
*/

%i "../../../TangNano4K/spi_s2s.h"

%i "../nes_core.h"
%i "../mapper/Mapper.h"
%i "display_5.h"
%i "VGA_ctrl.h"
%i "../../../hdl/dsdac7.h"
%i "DDS_24975to5369318.h"
%i "dsdac16.h"

declare Mapper_enable interface { output enable<256>; }

%i "../mem/ram_8x8k.h"

circuit core
{
	input BTN;
	output LED;
//--------------------- JTAG Interface --------------------
	input TCK, TDI;
	output TDO;
	spi_s2s uart;
//--------------------- HyperRAM Interface --------------------
	// 64Mbit、16bit * 4MWord = 8MB
	output hpram_adrs<22>, hpram_din<16>;
	instrout hpram_write(hpram_adrs, hpram_din);
	instrout hpram_read(hpram_adrs);
	input hpram_dout<16>, hpram_busy;
	reg_wr hpram_ack;
//--------------------- VGA --------------------------------
	output DVI_VS, DVI_HS, DVI_DE;
	output DVI_R<8>, DVI_G<8>, DVI_B<8>;
	VGA_ctrl vga;
	Display_5 dis;
//-------------------- SOUND -------------------------------
	dsdac16 dac;
//	output Sound;
//------------------------------------------------------

	reg_ws reset;

	reg_wr prg_read_ok;

	// NES
	nes_core nes;
	Mapper cart;
	Mapper_enable mapper_enable;

	ram_8x8k chr_ram;

	DDS_24975to5369318 dds_ntsc;

	stage_name nes_line { task do(); }
//	stage_name clock3580k { task do(); }
	stage_name key_seek { task next(); task back(); }
	stage_name uart2rom { task do(); }
	stage_name prg_set_wait { task do(); }

	if(reset){
		reset := 0b0;
	//	generate clock3580k.do();
	}

	uart.jiclk = TCK;
	uart.jisdt = TDI;
	TDO = uart.josdt;

	// HyperRAM 49.95MHzサポート
	hpram_ack := ^hpram_busy;

	vga.vt_su = 2;
	vga.vt_vu = 2 + 33; // 35
	vga.vt_nu = 2 + 33 + 16 -2; // 51 -2
	vga.vt_nd = 2 + 33 + 16 + 448 -2; // 499 -2
	vga.vt_vd = 2 + 33 + 480; // 515
	vga.vt_sd = 525 - 1;
	vga.ht_su = 96;
	vga.ht_vu = 96 + 48;
	vga.ht_nu = 96 + 48 + 64;
	vga.ht_nd = 96 + 48 + 64 + 512;
	vga.ht_vd = 96 + 48 + 640;
	vga.ht_sd = 800 - 1;

	DVI_HS = ^vga.hsync; // DVIの同期信号はLowアクティブ
	DVI_VS = ^vga.vsync; // DVIの同期信号はLowアクティブ
	DVI_DE = vga.view_valid;
	if(vga.view_valid){
		if(vga.win_valid){
			if(cart.supported){
				DVI_R = dis.r_out || 0b000;
				DVI_G = dis.g_out || 0b000;
				DVI_B = dis.b_out || 0b000;
			}
			else{
				DVI_R = 0xFF;
				DVI_G = 0x70;
				DVI_B = 0x70;
			}
		}
		else{
			DVI_R = 0x07;
			DVI_G = 0x07;
			DVI_B = 0x07;
		}
	}
	else{
		DVI_R = 0x00;
		DVI_G = 0x00;
		DVI_B = 0x00;
	}

	nes.f_real_cartridge = 0b0;
	nes.f_25MHz(); // CHR-ROMはBSRAMを使用しているので特に不要
	nes.IRQn = cart.IRQn;
	nes.VRAM_CSn = cart.VRAM_CSn;
	nes.VRAM_A10 = cart.VRAM_A10;
	if(^prg_read_ok) nes.ready();

//	nes.speed = SW<2>;
//	nes.stop  = 0b0;
	nes.f_nsf = cart.f_nsf;
	instruct cart.NMI_out nes.nsf_NMI();

	cart.mapper_enable = mapper_enable.enable;

	if(^prg_read_ok) cart.ready();
	instruct nes.clk_out cart.Phi();
/*
	// for NSF
	reg_wr cnt_1MHz<6>;
	if(cnt_1MHz==27){
		cart.tim1MHz();
		cnt_1MHz := 1;
	}
	else cnt_1MHz++;
*/

//	cart.nes_sound_L = nes.sound_L;
//	cart.nes_sound_R = nes.sound_R;

	dac.din = nes.sound_L || 0b00000000;

	LED = dac.dout;

	// NESPAD : 右|左|下|上|ｽﾀｰﾄ|ｾﾚｸﾄ|B|A
	nes.pad1P = 0b0000 || BTN || 0b00 || BTN;
	nes.pad2P = 0x00;

	cart.ROM_SELn = nes.ROM_SELn;
	cart.prg_A = nes.A;
	instruct nes.read_prg cart.prg_read();
	nes.prg_din = cart.prg_Dout;
	instruct cart.prg_ack nes.prg_ack();

	cart.prg_Din = nes.prg_dout;
	instruct nes.write_prg cart.prg_write();

	cart.chr_A = nes.PA;
	instruct nes.read_chr par{
		// romセット時にchr_rom読み込み防止
		if(prg_read_ok) cart.chr_read();
	}
	nes.chr_din = cart.chr_Dout;
	instruct cart.chr_ack nes.chr_ack();

	cart.chr_Din = nes.chr_dout;
	instruct nes.write_chr cart.chr_write();

	if(cart.prg_rom_read){
		hpram_read(0b00||cart.prg_rom_adrs);
	}
	if(^cart.prg_rom_read & hpram_ack){
		cart.prg_rom_ack();
	}
	cart.prg_rom_rdata = hpram_dout<7:0>;

	if(cart.prg_rom_write){
		hpram_write(0b00||cart.prg_rom_adrs, 0x00||cart.prg_rom_wdata);
	}

	if(cart.chr_ram_read){
		chr_ram.read(cart.chr_ram_adrs<12:0>);
	}
	if(^cart.chr_ram_read){
		cart.chr_ram_ack();
	}
	cart.chr_ram_rdata = chr_ram.dout;

	if(cart.chr_ram_write){
		chr_ram.write(cart.chr_ram_adrs<12:0>, cart.chr_ram_wdata);
	}

	instruct nes.NES_VIDEO_enable par{
		dis.write(nes.video);
	}

	// 24.975 MHz
	vga.run();

	instruct vga.dis par{
		reg_wr dis_timing;
		if(dis_timing==0b0) dis.read();
		dis_timing := ^dis_timing;
	}

	instruct vga.nes_hsync par{
		dis.bank_change();
		generate nes_line.do();
	}

	instruct dds_ntsc.run par{ // 5.369318MHz
		if(prg_read_ok){
			nes.run();
		}
	}

	instruct nes.clk_out par{
		cart.clock1789k();
	}

	instruct uart.recv_valid par{
		generate uart2rom.do();
	}

/*
	stage clock3580k {
		reg_wr clock3580k_count<4>;
		par{
			if(clock3580k_count==14){
				if(prg_read_ok){
					cart.clock3580k();
				}
				clock3580k_count := 1;
			}
			else clock3580k_count++;
			if(0b0) finish; // 未使用
		}
	}
*/
	stage nes_line {
		reg_wr pixel_count<9>;
		par{
			if(dds_ntsc.run){

				nes.draw();

				if(pixel_count==341){
					nes.hblank();
					pixel_count := 1;
					finish;
				}
				else pixel_count++;

				if(pixel_count==260){ // 256 + 8 ?
					cart.hblank();
				}
			}
		}
	}

	stage uart2rom {
		first_state rbegin;
		finish;
		state rbegin par{
			prg_read_ok := 0b0;
			nes.mem_clear();
			cart.set_map(uart.recv_data); // Mapper ID
			goto maps;
		}
		state maps par{
			cart.attach(uart.recv_data);
			if(cart.set_ok) goto rend;
		}
		state rend par{
			nes.soft_reset();
			cart.soft_reset();
			prg_read_ok := 0b1;
		//	generate prg_set_wait.do();
			goto rbegin;
		}
	}

	stage prg_set_wait {
		reg_wr pwait<4>;
		par{
			pwait++;
			if(/&pwait){
				prg_read_ok := 0b1;
				finish;
			}
		}
	}

}
