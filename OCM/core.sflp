
/*
	NES on FPGA feat. 1chipMSX
	NSF Player on FPGA feat. 1chipMSX
	Copyright (c) 2022 pgate1.

	prg : SDRAM
	chr : SDRAM
*/

%i "../../../OneChipMSX/sdram_ctrl.h"
%i "../../../OneChipMSX/sdcard_ctrl.h"
%i "../../../hdl/fat16.h"
%i "../../../OneChipMSX/keyboard_ctrl.h"

%i "../nes_core.h"
%i "../mapper/Mapper.h"
%i "display_5.h"
%i "../../../hdl/VGA_ctrl.h"
%i "DDS_501to5369318.h"
%i "dsdac16.h"
%i "wave_effect.h"

#define VRC7

circuit core
{
	output LEDP;
	output LED<8>;
//--------------------- SDRAM Interface --------------------
	output SDRAM_CSn, SDRAM_WEn, SDRAM_DEn;
	output SDRAM_RASn, SDRAM_CASn;
	output SDRAM_BA<2>, SDRAM_ADDR<13>;
	output SDRAM_LDQM, SDRAM_UDQM;
	input  SDRAM_Din<16>;
	output SDRAM_Dout<16>;
	sdram_ctrl sdram;
//--------------------- SD_Card Interface ------------------
	output SD_CSn; // SD Card CSn
	output SD_CLK; // SD Card Clock
	output SD_CMD; // SD Card Command & Dout
	input  SD_DAT; // SD Card Data
	sdcard_ctrl sdcard;
	fat16 fat;
//--------------------- PS/2 -------------------------------
	input PS2_KBCLK, PS2_KBDAT;
	keyboard_ctrl kb;
	mem keys[128];
//--------------------- VGA --------------------------------
	output VGA_HS, VGA_VS;
	output VGA_R<6>, VGA_G<6>, VGA_B<6>;
	reg_wr red_out_reg<6>, grn_out_reg<6>, blu_out_reg<6>;
	reg_wr clock25M_div;
	VGA_ctrl vga;
	Display_5 dis;
	reg_ws dis_timing;
//-------------------- SOUND -------------------------------
	dsdac16 dac_L, dac_R;
	output Sound_Left, Sound_Right;
//--------------------- JoyPad -----------------------------
	input JoyA<6>, JoyB<6>;

	reg_ws reset;

	reg_wr prg_read_ok;

	// NES
	nes_core nes;
	Mapper cart;

	reg_wr file_num<8>;

	DDS_501to5369318 dds_ntsc;

	wave_effect wave;

	stage_name nes_line { task do(); }
	stage_name clock3580k { task do(); }
	stage_name clock25M { task do(); }
	stage_name key2btn { task do(); }
	stage_name key_seek { task next(); task back(); }
	stage_name card2ram { task do(); }
	stage_name prg_set_wait { task do(); }

	if(reset){
		reset := 0b0;
		generate clock3580k.do();
		generate clock25M.do();
		generate card2ram.do();
		file_num := 0;
		generate key2btn.do();
	}

	SDRAM_CSn = sdram.CSn;
	SDRAM_RASn = sdram.RASn;
	SDRAM_CASn = sdram.CASn;
	SDRAM_WEn = sdram.WEn;
	SDRAM_DEn = sdram.DEn;
	SDRAM_BA = sdram.BA;
	SDRAM_ADDR = sdram.A;
	SDRAM_LDQM = sdram.LDM;
	SDRAM_UDQM = sdram.HDM;
	SDRAM_Dout = sdram.Dout;
	sdram.Din = SDRAM_Din;

	SD_CSn = sdcard.CSn;
	SD_CLK = sdcard.CLK;
	SD_CMD = sdcard.CMD;
	sdcard.DAT = SD_DAT;

	fat.sack = sdcard.ack;
	fat.sdata = sdcard.rdata;
	LEDP = sdcard.ack;

	kb.ps2Clk = PS2_KBCLK;
	kb.ps2Data = PS2_KBDAT;

	instruct vga.nes_vsync wave.vsync();
	wave.sound = nes.sound_L;

	vga.vt_su = 2;
	vga.vt_vu = 2 + 33;
	vga.vt_nu = 2 + 33 + 16 - 2;
	vga.vt_nd = 2 + 33 + 480 - 16 - 2;
	vga.vt_vd = 2 + 33 + 480;
	vga.vt_sd = 525 - 1;
	vga.ht_su = 96;
	vga.ht_vu = 96 + 48;
	vga.ht_nu = 96 + 48 + 64;
	vga.ht_nd = 96 + 48 + 64 + 512;
	vga.ht_vd = 96 + 48 + 640;
	vga.ht_sd = 800 - 1;
	if(vga.win_valid){
		if(cart.f_nsf){
			// 波形表示
			wave.read(vga.hcount, vga.vcount);
			red_out_reg := 0b0 || wave.r_out;
			grn_out_reg := 0b0 || wave.g_out;
			blu_out_reg := 0b0 || wave.b_out;
		}
		else{
			// 最上位ビットを使うとハイライトが強い
			red_out_reg := 0b0 || dis.r_out;
			grn_out_reg := 0b0 || dis.g_out;
			blu_out_reg := 0b0 || dis.b_out;
		}
	}
	else{
		// NES画面外の色（ディスプレイ自動幅調整のため）
		red_out_reg := 0b000001;
		grn_out_reg := 0b000001;
		blu_out_reg := 0b000001;
	}
	reg_wr VGA_HS_reg, VGA_VS_reg, VGA_R_reg<6>, VGA_G_reg<6>, VGA_B_reg<6>;
	VGA_HS_reg := vga.hsync; VGA_HS = VGA_HS_reg;
	VGA_VS_reg := vga.vsync; VGA_VS = VGA_VS_reg;
	VGA_R_reg := red_out_reg & (6#vga.view_valid); VGA_R = VGA_R_reg;
	VGA_G_reg := grn_out_reg & (6#vga.view_valid); VGA_G = VGA_G_reg;
	VGA_B_reg := blu_out_reg & (6#vga.view_valid); VGA_B = VGA_B_reg;

	nes.f_real_cartridge = 0b0;
	nes.IRQn = cart.IRQn;
	nes.VRAM_CSn = cart.VRAM_CSn;
	nes.VRAM_A10 = cart.VRAM_A10;
	if(^prg_read_ok) nes.ready();

	nes.f_stereo = 0b0;
	nes.speed = 0b0;
	nes.stop  = 0b0;
	nes.f_nsf = cart.f_nsf;
	instruct cart.NMI_out nes.nsf_NMI();

	if(^prg_read_ok) cart.ready();
	instruct nes.clk_out cart.Phi();

	reg_wr cnt_1MHz<6>;
	if(cnt_1MHz==50){
		cart.tim1MHz();
		cnt_1MHz := 1;
	}
	else cnt_1MHz++;

	cart.fat_eof = fat.eof;

#ifdef VRC7
	cart.mute = 0b0000000;
#else
	// VRC7を一時除外
	cart.mute = 0b0000001;
#endif
//nes.mute = 0b00000;

	cart.nes_sound_L = nes.sound_L;
	cart.nes_sound_R = nes.sound_R;
	nes.f_volume_boost = 0b00100; // 三角波をブースト
	cart.nes_volume_boost = nes.volume_boost;

// クリップして逆位相サラウンド ok 切り替え時にプチノイズ
	sel sound_L_clip<14>, sound_R_clip<14>;
	sel sound_L<14>, sound_R<14>;
	any{
		cart.sound_L<14> : sound_L_clip = -1;
		else : sound_L_clip = cart.sound_L<13:0>;
	}
	any{
		cart.sound_R<14> : sound_R_clip = -1;
		else : sound_R_clip = cart.sound_R<13:0>;
	}
	if(0b0){ // 逆位相サラウンド
		sound_L = sound_L_clip + 0b10000000000000; // 加算でプチノイズが消える
		sound_R = -(sound_R_clip + 0b10000000000000);
	}
	else{
		sound_L = sound_L_clip;
		sound_R = sound_R_clip;
	}
	dac_L.din = sound_L || 0b00;
	dac_R.din = sound_R || 0b00;
	Sound_Left  = dac_L.dout;
	Sound_Right = dac_R.dout;

	// MSXPAD : BA右左下上
	// NESPAD : 右|左|下|上|ｽﾀｰﾄ|ｾﾚｸﾄ|B|A
	nes.pad1P = (JoyA<3:0> || 0b00 || JoyA<5:4>)
		| (keys[0x74] || keys[0x6B] || keys[0x72] || keys[0x75] || keys[0x5A] || keys[0x29] || 
			(keys[0x1A] | keys[0x1D]) || (keys[0x22] | keys[0x23])); // BA : ZW || XD
	nes.pad2P = JoyB<3:0> || 0b00 || JoyB<5:4>;

	LED = nes.pad1P /*| nes.pc_out<15:8>*/;
//	LED = checksum;

	// ソフトリセット
	if(/&nes.pad1P<3:2>){
		nes.soft_reset();
		cart.soft_reset();
	}

	sel key_next, key_prev;
//	if(cart.f_nsf){
		key_next = keys[0x66];
		if(key_next){ // 進む セレクト＋左
			generate key_seek.next();
		}
/*
		key_prev = keys[0x29] & keys[0x74];
		if(key_prev){ // 戻る セレクト＋右
			generate key_seek.back();
		}
*/
//	}

	cart.ROM_SELn = nes.ROM_SELn;
	cart.prg_A = nes.A;
	instruct nes.read_prg cart.prg_read();
	nes.prg_din = cart.prg_Dout;
	instruct cart.prg_ack nes.prg_ack();

	cart.prg_Din = nes.prg_dout;
	instruct nes.write_prg cart.prg_write();

	cart.chr_A = nes.PA;
	instruct nes.read_chr par{
		// romセット時にchr_rom読み込み防止
		if(prg_read_ok) cart.chr_read();
	}
	nes.chr_din = cart.chr_Dout;
	instruct cart.chr_ack nes.chr_ack();

	cart.chr_Din = nes.chr_dout;
	instruct nes.write_chr cart.chr_write();

	// SDRAM1個でPRG-ROMとCHR-ROMを共有する
	reg_wr prg_read_wait, prg_read_ack_wait;
	reg_wr chr_read_wait, chr_read_ack_wait;
	reg_wr chr_write_wait, chr_write_ack_wait;

	// PRG-ROM readは、CHR-ROMアクセス発行と同時だったらこちら優先だが、
	// すでにCHR-ROMアクセス時なら終了待ち、ack必要。
	if( (
		(cart.prg_rom_read & 
			(^chr_read_wait) & (^chr_read_ack_wait) & (^chr_write_wait) & (^chr_write_ack_wait)
		) | prg_read_wait
		) & sdram.ack){
		sdram.read(0b0000||cart.prg_rom_adrs);
		prg_read_wait := 0b0;
		prg_read_ack_wait := 0b1;
	}
	else if(cart.prg_rom_read) prg_read_wait := 0b1;
	if(prg_read_ack_wait & sdram.ack){
		prg_read_ack_wait := 0b0;
		cart.prg_rom_ack();
	}
	cart.prg_rom_rdata = sdram.rdata<7:0>;

	// PRG-ROM writeは、ROM読み込み時のみなので排他処理不要。
	instruct cart.prg_rom_write par{
		sdram.write(0b0000||cart.prg_rom_adrs, 0x00||cart.prg_rom_wdata);
	}

	// CHR-ROM readは、PRG-ROM readアクセス終了待ち、ack必要。
	if( (cart.chr_ram_read | chr_read_wait) &
		(^cart.prg_rom_read) & (^prg_read_wait) & (^prg_read_ack_wait) & sdram.ack){
		sdram.read(0b000100||cart.chr_ram_adrs);
		chr_read_wait := 0b0;
		chr_read_ack_wait := 0b1;
	}
	else if(cart.chr_ram_read) chr_read_wait := 0b1;
	if(chr_read_ack_wait & sdram.ack){
		chr_read_ack_wait := 0b0;
		cart.chr_ram_ack();
	}
	cart.chr_ram_rdata = sdram.rdata<7:0>;

	// CHR-RAM writeは、PRG-ROM readアクセス終了待ち、ack不要。
	if( (cart.chr_ram_write | chr_write_wait) &
		(^cart.prg_rom_read) & (^prg_read_wait) & (^prg_read_ack_wait) & sdram.ack){
		sdram.write(0b000100||cart.chr_ram_adrs, 0x00||cart.chr_ram_wdata);
		chr_write_wait := 0b0;
		chr_write_ack_wait := 0b1;
	}
	else if(cart.chr_ram_write) chr_write_wait := 0b1;
	if(chr_write_ack_wait & sdram.ack){
		chr_write_ack_wait := 0b0;
	}

	instruct nes.NES_VIDEO_enable par{
		dis.write(nes.video);
	}

	instruct vga.dis par{
		if(dis_timing) dis.read();
		dis_timing := ^dis_timing;
	}

	instruct vga.nes_hsync par{
		dis.bank_change();
		generate nes_line.do();
	}

	instruct dds_ntsc.run par{ // 5.369318MHz
		if(prg_read_ok){
			nes.run();
		}
	}

	instruct nes.clk_out par{
		cart.clock1789k();
	}

	instruct fat.sread par{
		sdcard.read(fat.sadrs);
	}

	stage clock3580k {
		reg_wr clock3580k_count<4>;
		par{
			if(clock3580k_count==14){
				if(prg_read_ok){
					cart.clock3580k();
				}
				clock3580k_count := 1;
			}
			else clock3580k_count++;
			if(0b0) finish; // 未使用
		}
	}

	stage nes_line {
		reg_wr pixel_count<9>;
		par{
			if(dds_ntsc.run){

				nes.draw();

				if(pixel_count==341){
					nes.hblank();
					pixel_count := 1;
					finish;
				}
				else pixel_count++;

				if(pixel_count==260){ // 256 + 8 ?
					cart.hblank();
				}
			}
		}
	}

	stage clock25M {
		par{
			clock25M_div := ^clock25M_div;
			if(clock25M_div /*& prg_read_ok*/) vga.run();
			if(0b0) finish; // 未使用
		}
	}

	stage key2btn {
		reg_ws push;
		par{
			if(kb.scanok) switch(kb.scancode){
				case 0xE0: ; // 無視
				case 0xF0: push := 0b0;
				default: par{
					keys[kb.scancode<6:0>] := push;
					push := 0b1;
				}
			}
			if(0b0) finish;
		}
	}

	stage key_seek {
		first_state iwait;
		state iwait par{
			prg_read_ok := 0b0;
			goto st1;
		}
		state st1 par{
			any{
				key_seek.next : file_num++;
				key_seek.back : file_num--;
			}
			generate card2ram.do();
			goto st2;
		}
		state st2 if(^card2ram.do){
			if((key_seek.next & (^key_next))
			 | (key_seek.back & (^key_prev))){
				goto iwait;
				finish;
			}
		}
	}

	stage card2ram {
		first_state rbegin;
		state rbegin if(fat.ack){
			prg_read_ok := 0b0;
			fat.fopen(file_num);
			goto fatrh;
		}
		state fatrh if(fat.ack){
			fat.read();
			goto head;
		}
		state head if(fat.ack){
			cart.set_head(fat.fdata);
			fat.read();
			if(cart.head_err){
				any{
					key_seek.next : file_num++;
					key_seek.back : file_num--;
					else : file_num++;
				}
				goto rbegin;
			}
			if(cart.head_ok) goto reopen;
		}
		state reopen if(fat.ack){
			nes.mem_clear();
			fat.fopen(file_num);
			goto maps;
		}
		state maps if(fat.ack & cart.ack & sdram.ack){
			//if(^fat.eof)
			 fat.read();
			cart.attach(fat.fdata);
			if(cart.set_ok) goto rend;
		}
		state rend if(sdram.ack){
			nes.soft_reset();
			cart.soft_reset();
			prg_read_ok := 0b1;
		//	generate prg_set_wait.do();
			goto rbegin;
			finish;
		}
	}

	stage prg_set_wait {
		reg_wr pwait<4>;
		par{
			pwait++;
			if(/&pwait){
				prg_read_ok := 0b1;
				finish;
			}
		}
	}

}
